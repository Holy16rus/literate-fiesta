# meta developer: @holy16rus

from telethon.tl.types import Message 
from .. import loader, utils

@loader.tds
class Holilist(loader.Module):
    """A module that allows you to create a list of movies, TV series, anime, and manga."""

    strings = {
        "name": "Holilist",
        "added": "üíæ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n<code>{}</code>",
        "removed": "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ:</b>\n<code>{}</code>",
        "no_content": "üö´ <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</b>",
        "no_item": "üö´ <b>–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        "available_categories": "üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n1. –§–∏–ª—å–º—ã\n2. –î–æ—Ä–∞–º—ã\n3. –ê–Ω–∏–º–µ\n4. –ú–∞–Ω–≥–∏\n5. –°–µ—Ä–∏–∞–ª—ã",
        "all_items": "üåê <b>–í—Å–µ –≤–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã:</b>\n",
        "no_items": "üòî <b>–£ –≤–∞—Å –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.</b>",
        "deleted_all": "üóëÔ∏è <b>–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}</b> –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
        "confirm_delete_all": "üîÑ <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}</b>? (–î–∞/–ù–µ—Ç)",
    }

    async def client_ready(self):
        self._items = self.get("items", {})

    async def add_content(self, category: str, title: str, part: str):
        if part:
            full_title = f"<code> {title} —á–∞—Å—Ç—å:{part} </code>"
        else:
            full_title = f"<code>{title}</code>"

        if category not in self._items:
            self._items[category] = []

        self._items[category].insert(0, full_title)
        self.set("items", self._items)
        return full_title

    @loader.command(ru_doc="<title> [—á–∞—Å—Ç—å] - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
    async def —Ñ–∏–ª—å–º(self, message: Message):
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if not parts:
            await utils.answer(message, self.strings("no_content"))
            return

        if parts[-1].isdigit():
            title = ' '.join(parts[:-1]).strip()
            part = parts[-1].strip()
        else:
            title = ' '.join(parts).strip()
            part = ""

        full_title = await self.add_content("—Ñ–∏–ª—å–º", title, part)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ")
    async def –∞–Ω–∏–º–µ(self, message: Message):
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–∞–Ω–∏–º–µ", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–∞–º—É")
    async def –¥–æ—Ä–∞–º–∞(self, message: Message):
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–¥–æ—Ä–∞–º–∞", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<title> <episode> - –î–æ–±–∞–≤–∏—Ç—å –º–∞–Ω–≥—É")
    async def –º–∞–Ω–≥–∞(self, message: Message):
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 2:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-1]).strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–º–∞–Ω–≥–∞", title, "1", episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª")
    async def —Å–µ—Ä–∏–∞–ª(self, message: Message):
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("—Å–µ—Ä–∏–∞–ª", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<category> <title> - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def removecontent(self, message: Message):
        args = utils.get_args_raw(message).strip()

        if not args:
            await utils.answer(message, self.strings("no_content"))
            return

        parts = args.split(' ')
        category = parts[0].strip().lower()
        title = ' '.join(parts[1:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        if not title:
            await utils.answer(message, self.strings("no_content"))
            return

        full_title = f"<code> {title} —Å–µ–∑–æ–Ω: {season} —Å–µ—Ä–∏—è: {episode}</code>"

        if category in self._items and full_title in self._items[category]:
            self._items[category].remove(full_title)
            self.set("items", self._items)
            await utils.answer(message, self.strings("removed").format(full_title))
        else:
            await utils.answer(message, self.strings("no_item"))

    @loader.command(ru_doc="<category> - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def removeall(self, message: Message):
        args = utils.get_args_raw(message).strip()

        if not args:
            await utils.answer(message, self.strings("no_content"))
            return

        category = args.strip().lower()

        if category in self._items:
            await utils.answer(message, self.strings("confirm_delete_all").format(category))
            del self._items[category]
            self.set("items", self._items)
            await utils.answer(message, self.strings("deleted_all").format(category))
        else:
            await utils.answer(message, "üö´ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")

    @loader.command(ru_doc="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    async def categories(self, message: Message):
        await utils.answer(message, self.strings("available_categories"))

    @loader.command(ru_doc="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    async def listitems(self, message: Message):
        result = self.strings("all_items")

        if not self._items:
            await utils.answer(message, self.strings("no_items"))
            return

        for category, titles in self._items.items():
            result += f"\n<b>{category.capitalize()}:</b>"
            for idx, title in enumerate(titles, start=1):
                result += f"\n{idx}. {title}"

        await utils.answer(message, result)
