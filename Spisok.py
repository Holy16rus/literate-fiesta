from telethon.tl.types import Message  # type: ignore
from .. import loader, utils

@loader.tds
class ContentManager(loader.Module):
    """Module for managing content categories such as movies, series, anime, and manga."""

    strings = {
        "name": "ContentManager",
        "added": "üíæ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n<code>{}</code>",
        "removed": "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–æ:</b>\n<code>{}</code>",
        "updated": "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b>\n<code>{}</code>",
        "no_content": "üö´ <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</b>",
        "no_item": "üö´ <b>–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        "available_categories": "üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n1. –§–∏–ª—å–º\n2. –î–æ—Ä–∞–º–∞\n3. –ê–Ω–∏–º–µ\n4. –ú–∞–Ω–≥–∞\n5. –°–µ—Ä–∏–∞–ª",
        "all_items": "üìú <b>–í—Å–µ –≤–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã:</b>\n",
        "no_items": "üòî <b>–£ –≤–∞—Å –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.</b>",
        "deleted_all": "üóëÔ∏è <b>–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}</b> –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
        "confirm_delete_all": "üîÑ <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}</b>? (–î–∞/–ù–µ—Ç)",
    }

    async def client_ready(self):
        self._items = self.get("items", {})  # {category: [titles]}

    async def add_content(self, category: str, title: str, season: str, episode: str):
        """Helper function to add content to a specified category."""
        full_title = f"<code>{title}</code> —Å–µ–∑–æ–Ω: <code>{season}</code> —Å–µ—Ä–∏—è: <code>{episode}</code>"

        if category not in self._items:
            self._items[category] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        self._items[category].insert(0, full_title)
        self.set("items", self._items)
        return full_title

    @loader.command(ru_doc=".—Ñ–∏–ª—å–º <title> [—á–∞—Å—Ç—å] - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
    async def —Ñ–∏–ª—å–º(self, message: Message):
        """Add a movie to the list"""
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if not parts:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-1]).strip()  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
        part = parts[-1].strip() if parts[-1].isdigit() else ""  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —á–∞—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ

        full_title = f"<code>{title}</code>{' —á–∞—Å—Ç—å: <code>{}</code>'.format(part) if part else ''}"

        if part:
            full_title = f"<code>{title}</code> —á–∞—Å—Ç—å: <code>{part}</code>"

        await self.add_content("—Ñ–∏–ª—å–º", title, part or "1", part or "1")
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc=".–∞–Ω–∏–º–µ <title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ")
    async def –∞–Ω–∏–º–µ(self, message: Message):
        """Add anime to the list"""
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–∞–Ω–∏–º–µ", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc=".–¥–æ—Ä–∞–º–∞ <title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ä–∞–º—É")
    async def –¥–æ—Ä–∞–º–∞(self, message: Message):
        """Add a drama to the list"""
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–¥–æ—Ä–∞–º–∞", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc=".–º–∞–Ω–≥–∞ <title> <episode> - –î–æ–±–∞–≤–∏—Ç—å –º–∞–Ω–≥—É")
    async def –º–∞–Ω–≥–∞(self, message: Message):
        """Add manga to the list"""
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 2:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-1]).strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("–º–∞–Ω–≥–∞", title, "1", episode)  # –°–µ–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "1"
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc=".—Å–µ—Ä–∏–∞–ª <title> <season> <episode> - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª")
    async def —Å–µ—Ä–∏–∞–ª(self, message: Message):
        """Add a series to the list"""
        args = utils.get_args_raw(message).strip()
        parts = args.split(' ')

        if len(parts) < 3:
            await utils.answer(message, self.strings("no_content"))
            return

        title = ' '.join(parts[:-2]).strip()
        season = parts[-2].strip()
        episode = parts[-1].strip()

        full_title = await self.add_content("—Å–µ—Ä–∏–∞–ª", title, season, episode)
        await utils.answer(message, self.strings("added").format(full_title))

    @loader.command(ru_doc="<category> <title> - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def removecontent(self, message: Message):
        """<category> <title> <season> <episode> - Remove content from a category"""
        args = utils.get_args_raw(message).strip()

        if not args:
            await utils.answer(message, self.strings("no_content"))
            return

        parts = args.split(' ')
        category = parts[0].strip().lower()
        title = ' '.join(parts[1:-2]).strip()  # –°–æ–µ–¥–∏–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        season = parts[-2].strip()  # –ß–∏—Å–ª–æ –¥–ª—è —Å–µ–∑–æ–Ω–∞
        episode = parts[-1].strip()  # –ß–∏—Å–ª–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏

        if not title:
            await utils.answer(message, self.strings("no_content"))
            return

        full_title = f"<code>{title}</code> —Å–µ–∑–æ–Ω: <code>{season}</code> —Å–µ—Ä–∏—è: <code>{episode}</code>"

        if category in self._items and full_title in self._items[category]:
            self._items[category].remove(full_title)
            self.set("items", self._items)
            await utils.answer(message, self.strings("removed").format(full_title))
        else:
            await utils.answer(message, self.strings("no_item"))

    @loader.command(ru_doc="<category> - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def removeall(self, message: Message):
        """<category> - Remove all content from a category"""
        args = utils.get_args_raw(message).strip()

        if not args:
            await utils.answer(message, self.strings("no_content"))
            return

        category = args.strip().lower()

        if category in self._items:
            await utils.answer(message, self.strings("confirm_delete_all").format(category))
            del self._items[category]  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.set("items", self._items)
            await utils.answer(message, self.strings("deleted_all").format(category))
        else:
            await utils.answer(message, "üö´ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")

    @loader.command(ru_doc="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    async def categories(self, message: Message):
        """List all available content categories"""
        await utils.answer(message, self.strings("available_categories"))

    @loader.command(ru_doc="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    async def listitems(self, message: Message):
        """List all items in categories"""
        result = self.strings("all_items")

        if not self._items:
            await utils.answer(message, self.strings("no_items"))
            return

        for category, titles in self._items.items():
            result += f"\n<b>{category.capitalize()}:</b>"
            for idx, title in enumerate(titles, start=1):
                result += f"\n{idx}. {title}"  # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫

        await utils.answer(message, result)